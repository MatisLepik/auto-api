#!/usr/bin/env ruby
puts "*** Hey #{ENV['USER']} I'll try to generate Swagger definitions for you.."

require 'yaml'

# Helpers

def decimal(hex_string)
  hex_string.to_i(16)
end

def ieee(hex_string)
  [hex_string.gsub('0x', '')].pack('H16').unpack('g').first
end

def hex_to_s(hex_string)
  [hex_string.gsub('0x', '')].pack('H*')
end

def swagger_name(name)
  name.split('_').map { |w| w.capitalize }.join
end

def swagger_prop_name(spec, ex_array = [])
  return spec['title_case_name'] if spec['title_case_name']
  name = ex_array.include?(spec['name']) ? ex_array[spec['name']] : spec['name']

  name.split('_').map.with_index { |w, i| 
    # TODO: handle naming exceptions - best to just add to auto api spec?
    i == 0 ? w : w.capitalize
  }.join
end

# Create header
defs = Hash.new
defs['definitions'] = Hash.new

# Load exceptions spec
exceptions = YAML.load_file('exceptions.yaml')

# All capabilities
Dir.glob('../*.yml') do |yml_file|
  # Capability
  spec = YAML.load_file(yml_file)
  
  unless spec['properties']
    puts "Skipping #{spec['name']} as there's no properties.."
    next
  end

  cap = Hash.new
  cap['type'] = 'object'
  cap['properties'] = Hash.new
  cap_name = nil

  example = YAML.load_file("../examples/#{spec['name']}.yml")

  # - Get Swagger formatted model name
  spec['message_types'].each do |msg|
    if msg['id'] == '0x01'
      cap_name = swagger_name(msg['name'])
      break
    end
  end

  puts "Starting with #{cap_name}.."

  # - Capability properties
  spec['properties'].each do |prop_spec|
    puts "Now property #{prop_spec['name']}.."
    prop = Hash.new

    # --- Check for swagger exception
    if ex_item = exceptions['exceptions'][prop_spec['name']]
      puts "Found an exception for exception #{ex_item}.."
      prop = ex_item.dup
    else
      example_val = example[prop_spec['name']] ?
        example[prop_spec['name']].first['item'].first['value'] : String.new

      case prop_spec['type']
      when 'string'
        prop['type'] = 'string'
        # -- Handling string format
        prop['example'] = hex_to_s(example_val)
        prop['description'] = prop_spec['description']
      when 'integer'
        prop['type'] = 'number'
        prop['format'] = 'integer'
        # -- Handling decimal format
        prop['example'] = decimal(example_val)
        prop['description'] = prop_spec['description']
      when 'float'
        prop['type'] = 'number'
        prop['format'] = 'float'
        # -- Handling IEE 754 format
        prop['example'] = ieee(example_val)
        prop['description'] = prop_spec['description']
      when 'enum'
        prop['type'] = 'string'
        prop['enum'] = prop_spec['values'].map { |val| val['name'] }
        prop['example'] = prop_spec['values'].first['name']
      else
        # -- Handling object
        if prop_spec['items']
          # --- Creating a new model to be referenced
          prop_model = Hash.new
          prop_model['type'] = 'object'
          prop_model['properties'] = Hash.new
      
          prop_spec['items'].each_with_index do |prop_item_spec, idx|
            item = Hash.new
            item_example = example[prop_spec['name']].first['item']

            case prop_item_spec['type']
            when 'string'
              item['type'] = 'string'
              # -- Handling string format
              item['example'] = hex_to_s(item_example[idx]['value'])
              item['description'] = prop_item_spec['description']
            when 'integer'
              item['type'] = 'number'
              item['format'] = 'integer'
              # -- Handling decimal format
              item['example'] = decimal(item_example[idx]['value'])
              item['description'] = prop_item_spec['description']
            when 'float'
              item['type'] = 'number'
              item['format'] = 'float'
              # -- Handling IEE 754 format
              item['example'] = ieee(item_example[idx]['value'])
              item['description'] = prop_item_spec['description']
            when 'enum'
              item['type'] = 'string'
              item['enum'] = prop_item_spec['values'].map { |val| val['name'] }
              item['example'] = prop_item_spec['values'].first['name']
            else
              puts "Found a property item with type #{prop_item_spec['type']} - skipping that.."
            end

            # --- Adding item to property
            prop_model['properties'][swagger_prop_name(prop_item_spec)] = item
          end

          prop_swagger_name = swagger_name(prop_spec['name'])

          # -- Referencing to model
          if exceptions['arrays'].keys.include?(prop_spec['name'])
            prop['type'] = 'array'
            prop['items'] = {
              'description' => prop_swagger_name,
              '$ref' => "#/definitions/#{prop_swagger_name}"
            }
          else
            prop['description'] = prop_swagger_name
            prop['$ref'] = "#/definitions/#{prop_swagger_name}"
          end

          # -- Push model to definitions
          defs['definitions'][prop_swagger_name] = prop_model
        else
          puts "Found a property with type #{prop_spec['type']} - skipping that.."
          next
        end
      end
    end

    # -- Add property
    cap['properties'][swagger_prop_name(prop_spec, exceptions['arrays'])] = prop
  end

  # - Push capability
  defs['definitions'][cap_name] = cap
end

# Add additional models from exceptions conf
exceptions['definitions'].each do |model|
  # key, object
  defs['definitions'][model.first] = model.last
end

# Store definitions
open("definitions.yaml", 'w') { |f| f.write(defs.to_yaml) }

# All done
puts "*** I think I made it.."